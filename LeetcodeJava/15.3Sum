class Solution {
    
//     Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

// Note: The solution set must not contain duplicate triplets.

// For example, given array S = [-1, 0, 1, 2, -1, -4],

// A solution set is:
// [
//   [-1, 0, 1],
//   [-1, -1, 2]
// ]
    // public List<List<Integer>> threeSum(int[] nums) {
        
//         List<List<Integer>> result = new ArrayList<List<Integer>>();
//         int sum=0;
//         List<Integer> w = new ArrayList<Integer>();
//         if(nums.length<3){
//             return null;
//         }
        
//         for(int i=0;i<nums.length-2;i++){
//             for(int j=i+1; j<nums.length-1;i++){
//                 for(int k=j+1;k<nums.length;k++){                
//                     if(nums[i]+nums[j]+nums[k]==0){
//                         w.add(nums[i]);
//                         w.add(nums[j]);
//                         w.add(nums[k]);
//                         result.add(w);
//                         w.clear();
//                     }
//                 }
//             }
//         }
        
//         return result;
public List<List<Integer>> threeSum(int[] nums) {
    List<List<Integer>> res = new ArrayList<>();
    Arrays.sort(nums);
    for (int i = 0; i + 2 < nums.length; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {              // skip same result
            continue;
        }
        int j = i + 1, k = nums.length - 1;  
        int target = -nums[i];
        while (j < k) {
            if (nums[j] + nums[k] == target) {
                res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                j++;
                k--;
                while (j < k && nums[j] == nums[j - 1]) j++;  // skip same result
                while (j < k && nums[k] == nums[k + 1]) k--;  // skip same result
            } else if (nums[j] + nums[k] > target) {
                k--;
            } else {
                j++;
            }
        }
    }
    return res;
}        
        
        
    }
