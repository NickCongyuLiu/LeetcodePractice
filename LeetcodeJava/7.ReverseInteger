// Given a 32-bit signed integer, reverse digits of an integer.

// Example 1:

// Input: 123
// Output:  321
// Example 2:

// Input: -123
// Output: -321
// Example 3:

// Input: 120
// Output: 21
// Note:
// Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

*************************

class Solution {
    public int reverse(int x) {
        double INT_MAX = 2147483647;
        if(x>INT_MAX || x<-INT_MAX){
            return 0;
        }
        boolean isNegative = x < 0 ? true : false;
        if(isNegative){
            x = x * -1;
        }
        int reverse = 0; 
        while (x >= 1) { 
            if(reverse>INT_MAX/10){
                return 0;
            }
            reverse = reverse * 10 + x % 10;
            x = x / 10; 
        } 
        if(reverse > INT_MAX){
            return 0;
        }
        return isNegative == true? reverse*-1 : reverse; 
    }

}
