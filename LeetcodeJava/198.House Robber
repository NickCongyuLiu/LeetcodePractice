// For every house k, there are two options: either to rob it (include this house: i) or not rob it (exclude this house: e).

// Include this house:
// i = num[k] + e (money of this house + money robbed excluding the previous house)

// Exclude this house:
// e = max(i, e) (max of money robbed including the previous house or money robbed excluding the previous house)
// (note that i and e of the previous step, that's why we use tmp here to store the previous i when calculating e, to make O(1) space)

public class Solution {
    public int rob(int[] num) {
        int i = 0;
        int e = 0;
        for (int k = 0; k<num.length; k++) {
            int tmp = i;
            i = num[k] + e;
            e = Math.max(tmp, e);
        }
        return Math.max(i,e);
    }
}

// public int rob(int[] num) {
//     int rob = 0; //max monney can get if rob current house
//     int notrob = 0; //max money can get if not rob current house
//     for(int i=0; i<num.length; i++) {
//         int currob = notrob + num[i]; //if rob current value, previous house must not be robbed
//         notrob = Math.max(notrob, rob); //if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
//         rob = currob;
//     }
//     return Math.max(rob, notrob);
// }
